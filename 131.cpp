/*
    Very interesting. Consider the naive brute force search of looping through n
    and for each n, looping through m such that m^3 - n^3 < 1000000n^2. It turns out
    that whenever (m^3 - n^3) / n^2 = p is a prime solution, then (n, m) = (x^3, x^3 + x^2)
    for some positive integer x.

    We make a conjecture that this condition is required for all prime solutions and
    check through possible tuples (n, m, p) generated by x.
*/

#include <iostream>
#include <gmpxx.h>
#include "prime_util.h"

int main()
{
    int count = 0;
    mpz_class x = 1;
    mpz_class x2 = x * x;
    mpz_class x3 = x2 * x;
    while (true)
    {
        mpz_class n = x3;
        mpz_class n2 = n * n;
        mpz_class n3 = n2 * n;
        mpz_class m = x3 + x2;
        mpz_class m3 = m * m * m;
        if ((m3 - n3) % n2 == 0)
        {
            mpz_class p = (m3 - n3) / n2;
            if (util::is_prime(p))
            {
                if (p >= 1000000)
                {
                    std::cout << count;
                    break;
                }
                count++;
            }
        }
        x++;
        x2 = x * x;
        x3 = x2 * x;
    }
}
